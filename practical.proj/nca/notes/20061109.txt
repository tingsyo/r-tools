2006.11.09

[Functions updated]
  - nca     : add perplexity to returned value.
  - ncaknn  : add k (taking the floor of perplexity) to returned value
  - testcv10: adpating to modified ncaknn, also compare nca with k-NN rather than 1-NN
  - testloo : adpating to modified ncaknn, also compare nca with k-NN rather than 1-NN
  
[Test with iris dataset(standarized)]
"RAND"
$par                                            $perplexity     $value
          [,1]      [,2]      [,3]      [,4]    [1] 4.11718     [1] "-136.1574"
[1,] 3.7793690 3.3513345 0.5732793 0.1779048
[2,] 2.3670318 3.5163596 2.8484754 0.9180462
[3,] 1.6903134 0.1295089 4.0553598 2.2284782
[4,] 0.4292496 2.3893829 2.7748597 0.7726011

"COVM"
$par                                            $perplexity     $value
          [,1]      [,2]      [,3]      [,4]    [1] 1.823231     [1] "-135.6938"
[1,]   9.557268  0.000000   0.00000 0.000000
[2,]  -3.274118  4.051181   0.00000 0.000000
[3,] -14.448205  4.219027  13.31086 0.000000
[4,]   4.895655 -2.579113 -12.81656 3.593689


"PCOVM"
$par                                            $perplexity     $value
           [,1]       [,2]      [,3]     [,4]   [1] 11.50741    [1] "-143.5850"
[1,]  2.7267802  0.0000000  0.000000 0.000000
[2,] -0.7117424  1.4824193  0.000000 0.000000
[3,] -4.8204268 -0.9286624  4.689173 0.000000
[4,]  0.7910428 -1.6162433 -2.062623 3.724591


[Note]
1. Estimated k seems to vary a lot for different initial guesses.  This is reasonable because 1/k is in proportional to the scale of the optimized matrix, and the "PCOVM" seems to have smallest scale and hence largest perplexity.

2. Need to test with same initial guess but different splits of data to see the stability of k. (or A)





